// 7.1
#include <iostream>
using namespace std;

class Array {
public:
    static const int MAX_SIZE = 100;
    int size;
    unsigned int data[MAX_SIZE];
    Array(int size, unsigned int initial = 0) : size(size) {
        for (int i = 0; i < size; ++i) {
            data[i] = initial;
        }
    }

    virtual void add(const Array& other) {
        for (int i = 0; i < size && i < other.size; ++i) {
            data[i] += other.data[i];
        }
    }

    void display() const {
        for (int i = 0; i < size; ++i) {
            std::cout << data[i] << " ";
        }
        std::cout << std::endl;
    }
};

class ArrayA : public Array {
public:
    ArrayA(int size, unsigned int initial = 0) : Array(size, initial) {}

    void add(const Array& other) override {
        for (int i = 0; i < size && i < other.size; ++i) {
            data[i] += other.data[i] * 2;
        }
    }
};

class ArrayB : public Array {
public:
    ArrayB(int size, unsigned int initial = 0) : Array(size, initial) {}

    void add(const Array& other) override {
        for (int i = 0; i < size && i < other.size; ++i) {
            data[i] += other.data[i] * other.data[i];
        }
    }
};

int main() {
    Array arr(4, 10);
    ArrayA arrA(5, 20);
    ArrayB arrB(6, 30);

    arrA.add(arr);
    arrA.display();

    arrB.add(arr);
    arrB.display();
    return 0;
}
