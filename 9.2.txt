#include <iostream>
#include <stdexcept>
using namespace std;

class Rectangle {
private:
    double length;
    double width;

public:
    Rectangle(double l, double w) {
        if (l <= 0 || w <= 0) {
            throw invalid_argument("Length and width must be greater than zero.");
        }
        length = l;
        width = w;
    }

    Rectangle(double size) {
        if (size <= 0) {
            throw invalid_argument("Side length must be greater than zero.");
        }
        length = width = size;
    }

    // Method to calculate area of rectangle
    double rect_area() {
        return length * width;
    }

    // Overloaded method for square
    double rect_area(double side) {
        if (side <= 0) {
            throw invalid_argument("Side length must be greater than zero.");
        }
        return side * side;
    }
};

int main() {
    try {
        Rectangle rectangle(4.0, 3.0);
        Rectangle square(5.0);

        // Calculate area of rectangle
        cout << "Area of rectangle: " << rectangle.rect_area() << endl;

        // Calculate area of square
        cout << "Area of square: " << square.rect_area(5.0) << endl;
    } catch (const invalid_argument& e) {
        cerr << "Exception occurred: " << e.what() << endl;
    }
    return 0;
}
