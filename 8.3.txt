// 8.3
#include <iostream>
#include <fstream>
#include <vector>

using namespace std;

template<typename T>
class Stack {
private:
    vector<T> elements;

public:
    void push(const T& element) {
        elements.push_back(element);
    }

    void pop() {
        if (!elements.empty()) {
            elements.pop_back();
        }
    }

    const T& top() const {
        if (!elements.empty()) {
            return elements.back();
        }
        throw std::out_of_range("Stack<>::top(): empty stack");
    }

    bool empty() const {
        return elements.empty();
    }

    size_t size() const {
        return elements.size();
    }
};

class TrainCar {
public:
    int carNumber;
    TrainCar(int number) : carNumber(number) {}
};

class TrainSorter {
private:
    Stack<TrainCar> mainTrack;
    Stack<TrainCar> sideTrackA;
    Stack<TrainCar> sideTrackB;

public:
    void addToMainTrack(const TrainCar& car) {
        mainTrack.push(car);
    }

    void moveToSideTrackA() {
        if (!mainTrack.empty()) {
            sideTrackA.push(mainTrack.top());
            mainTrack.pop();
        }
    }

    void moveToSideTrackB() {
        if (!mainTrack.empty()) {
            sideTrackB.push(mainTrack.top());
            mainTrack.pop();
        }
    }

    void popFromSideTrackA() {
        if (!sideTrackA.empty()) sideTrackA.pop();
    }

    void popFromSideTrackB() {
        if (!sideTrackB.empty()) sideTrackB.pop();
    }

    void displayTrainComposition() const {
        cout << "Main track: ";
        displayStack(mainTrack);
        cout << "Side A: ";
        displayStack(sideTrackA);
        cout << "Side B: ";
        displayStack(sideTrackB);
    }

private:
    void displayStack(const Stack<TrainCar>& stack) const {
        Stack<TrainCar> tempStack = stack;
        while (!tempStack.empty()) {
            std::cout << tempStack.top().carNumber << " ";
            tempStack.pop();
        }
        std::cout << std::endl;
    }
};

void readTrainFromFile(TrainSorter& sorter, const string& filename) {
    ifstream inputFile(filename);
    if (!inputFile.is_open()) {
        cout << "Couldn't open file: " << filename << std::endl;
        return;
    }
    int carNumber;
    while (inputFile >> carNumber) {
        sorter.addToMainTrack(TrainCar(carNumber));
    }

    inputFile.close();
}

int main() {
    TrainSorter trainSorter;
    readTrainFromFile(trainSorter, "trains.txt");
    int num;
    do {
        cout << "What to do?" << endl
             << "1. Add wagon to main track" << endl
             << "2. Move wagon to side track A" << endl
             << "3. Move wagon to side track B" << endl
             << "4. Delete wagon from side track A" << endl
             << "5. Delete wagon from side track B" << endl
             << "6. Print all train sets info" << endl
             << "0. Exit" << endl;
        cin >> num;
        switch (num) {
            case 1: {
                int carNumber;
                std::cout << "Enter wagon: ";
                std::cin >> carNumber;
                trainSorter.addToMainTrack(TrainCar(carNumber));
                break;
            }
            case 2:
                trainSorter.moveToSideTrackA();
                break;
            case 3:
                trainSorter.moveToSideTrackB();
                break;
            case 4:
                trainSorter.popFromSideTrackA();
                break;
            case 5:
                trainSorter.popFromSideTrackB();
                break;
            case 6:
                trainSorter.displayTrainComposition();
                break;

            case 0:
                cout << "Shutting down" << endl;
                break;
            default:
                cout << "Incorrect input" << endl;
        }
    } while (num);
    return 0;
}